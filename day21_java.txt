
-----------------------------------





javac -version: javac는 java의 컴파일러 -는 기능 툴 version은 버전을 확인해주는 역할
java 환경 변수 설정 법
내pc->속성 고급->환경 변수 클릭 시스템 변수에JAVA_HOME으로 만듬->
경로는 내 pc java가 설치되어있는 경로 붙여넣기->
사용자 변수-->path에 %JAVA_HOME%\bin으로 만들기
control + '+','-': 확대, 축소
control shift s : 모두 저장
교재143쪽 참고



------------------------------
한동석 강사
tedhan1204@gmail.com
메일 제목: "평일 JAVA"홍길동
본문	:마음대로 작성(텍스트 문서 첨부& 작성)

-수업 일정

6.7~7.4- 휴강X

-강의 자료 공유
kedudisk.com
ID:it1000
PW:학생11!

-수업자료는 매일 백업한다.(개인 usb, 메일)
지각 결석시 메일
------------------------------------
추상 클래스(불완전한 클래스)
추상적인 내용만 정의하고 있는 클래스로 구체적인 내용은 하위 클래스에서 구현되도록 해놓은 클래스
추상클래스는 (부모) 클래스들의(자식) 공통요소들을 가상화 시켜놓는다.
객체화는 가능하나 잘 사용하지 않는다.(목적에 어긋난다.)
부모 추상 클래스의 역할은 단지 자식 클래스를 만들 때 도와주는 역할을 수행하기 위해 존재한다.(다형성)
자식 클래스에서 사용할 메서드의 이름만 갖고 있다.(미구현 상태)즉, {}를 갖지 않는다.
그 메서드를 추상 메서드라고 하며, abstract 키워드가 앞에 붙는다.
일반 메서드도 선언 가능하다.
정의 방법

abstract 추상 클래스명{
abstract 리턴 사입 추상 메서드(매개변수,...);


메서드에서 중괄호가 있으면 구현상태 없으면 미구현 상태
추상 클래스에서 abstract한 메서드는 상속받은 클래스에서 재정의 해야한다.
ex)
public abstract class Shape {
	double area;
	
	public abstract void draw(double w, double h);
	
	final static void function() {//절대로 overriding 안되게 함
		System.out.println("추상 클래스의 일반 메서드 입니다.");
	}
}

class Rect extends Shape{
	@Override
	public void draw(double w, double h) {
		System.out.println("직사각형 점 4개 연결");
		area=w*h;
		System.out.println("넓이: "+area);		
	}
}
-------------------------------------------

인터페이스
추상 클래스를 고도화 시킨 문법이며, 반드시 추상 메서드와 상수만 선언해야 한다.
다른 클래스에서 인터페이스를 지정 할 때에는 implements를 사용한다.
지정된 인터페이스가 가지고 있는 추상 메서드들을 반드시 재정의 해야한다.
일반 메서드는 정의할 수 없다.
인터페이스는 일반메서드는 정의 할 수 없고 처음에 정의한 것만 사용해야한다.(강제성)
control+n class랑 다름

인터페이스 내에서 메서드 선언시 자동적으로 추상메서드로 선언된다.
(생략도 됨)


변수선언시 자동적으로 final static으로 생성된다.=외부에서 수정이 불가능하다.


틀을 완벽히 정해놓고 맞춰서만 해야한다.

------------------------------
인터페이스가 강제성에 초점이 있다면 추상 클래스는 틀을 정하고 오버라이딩해서 확장에 의미가 있다.
package day21;

public interface Soldier {
	final static int arm=2;
	int legs=2;
	
	public abstract void eat();
	void work();
	void play();
	void sleep();
	void salute();
}


public class Pfc implements Soldier{

	@Override
	public void eat() {
		System.out.println("빠르고 정확하게 먹는다.");
	}

	@Override
	public void work() {
		System.out.println("이등병에게 일을 알려주며 열심히 일한다.");
	}

	@Override
	public void play() {
		System.out.println("노래방과 사이버 지식방, 오락기를 사용 한다.");
		
	}

	@Override
	public void sleep() {
		System.out.println("푸욱~ 잘 잔다. 자다말고 가끔 이등병과 어디 간다.");
		
	}

	@Override
	public void salute() {
		System.out.println("충!, 성!");
	}
	

}
---------------
Maker Interface
인터페이스 내부에 아무것도 없는 상태
그룹명 정도만 강제성이 없음 따로 구현할 필요 없음 intanseof사용하려고 이용
클래스들의 공통 그룹명으로 그룹명으로 인터페이스를 생성하고 아무것도 구현애놓지 않는다.
즉, 그 클래스들이 같은 그룹으로 묶였다는 표시를 하기 위해 사용한다.


public interface Animation {}


public class Digimon implements Animation {

}



















