JAVA에서는 문자열 + 상수가 자동형 변환이 됨
python에서는 문자열로 형변환을 해줘야함
JAVA에서는 배열을 new를 안해주고 char []word= {'안','녕'}; 이렇게 해도 heap영역에 할당된다.
[C@7852e922
[는 배열의 의미	 C는 자료형 char의 의미


hashcode공부하기

----------------
Object 재절명
10이라는 상수 값은 pool에 저장되고 따로 객체를 하더라도 pool의 주소가 들어간다.
new의 경우는 heap영역에 객체 방을 만들고 그 안에 pool안의 해당 상수의 값을 비교한다.

==의 경우 지역변수 내로까지만 접근해 비교한다.
따라서 new한 것과 지역변수로 바로 한것은 heap주소와 pool주소이므로 다르다.

constant pool (상수 영역)

String data1=new String("ABC");
String data2=new String("ABC");
String data3="ABC";
String data4="ABC";

인 경우

stack	heap		pool
ㅁdata1	ㅁnewABC	ㅁ10
ㅁdata2	ㅁnewABC
ㅁdata3
ㅁdata4

위그림에서 pool의 10 값이 각각 new ABC, data3,data4에 pool의 주소가 들어간다.
//intern()
//constant pool에 같은 값을 검색하여 그 주소값을 반환해 준다.

String str1="data";
String str2="data2";
String str3=new String("data");
String str4=new String("data");
System.out.println(str1 == str2);
System.out.println(str2==str4);
System.out.println(str2==str4.intern());//str2에는 직접 pool주소이고 str4에는 heap주소 이므로 intern사용시 pool주소가 반환된다.
System.out.println(str1.equals(str3));//주소값 안에 있는 '값'을 비교한다.
스트링 클래스의 경우는 equals를 사용하면 재정의가 되어 안에 있는 값을 비교한다.
하지만 equals자체는 실질적으로 주소값을 비교하는 메서드이다. 따라서
스트링 클래스가 아닌 경우는 객체의 주소값을 비교한다.
		
------------------------------
toString
객체를 초기화시킬때 자동적으로 생성되어있는 메서드
//객체명을 출력할때 항상 뒤에 toString()이 생략된다. 하지만 객체가 아닌 다른 일반타입에서는 toString이 생략되지 않는다.
실제로 다음과 같이 사용한다.
public class ObjectTest2 {
	
	int data1=10;
	int data2=20;
	int data3=30;
	
	public ObjectTest2 (int data1) {
		this.data1=data1;
	}
	
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return ""+data1+data2+data3;
	}
	
	public static void main(String[] args) {
	ObjectTest2 o = new ObjectTest2(90);
	System.out.println(o);
	//객체명을 출력할때 항상 뒤에 toString()이 생략된다.
	
	}
}
처음 초기화한 후 내부의 필드를 확인 할 때 사용
-------------------------------------------
hashcode() : 주소값(컬렉션 프레임워크)
--------------------------------------------
Wrapper 클래스
	기본형 타입을 객체화 하도록 도와주는 클래스
클래스 타입 -> Wrapper 클래스


박싱==wrapping
Wrapper 클래스 > 기본형 타입: 박싱(Boxing)
Wrapper 클래스 < 기본형 타입: 언박싱(Unboxing)

//jdk 1.5버전 전에는 무조건 이렇게 사용해야 한다.
String str = new String("1"); //박싱
//jdk 1.5이후
String str2="1"; //오토 박싱
Integer data=10;//오토 박싱
int data2=data;//오토 언박싱

오토 박싱은 자동으로 박싱이 되는것 오토 박싱은 new String을 같이 감싸줘야 한다.



사용 이유
Wrapper 클래스를 사용하는 이유
	기본형 타입을 객체로 다뤄야 할 때
	매개변수를 객체로 넘길 때
	기본형 타입이 아닌 객체로 저장해야 할 때
	객체간의 비교가 필요할 때

--------------------------------------------
빠른 for문(향상된 for문, foreach문 ....)
String []arData= {"안녕", "반가워", "이름이", "뭐니?"};
for(String i: arData)
{
		System.out.println(i);
}

int [][]arrScore= {
			{10,20,30},//1번
			{11,25,39},//2번
			{12,26,38},//3번
			{13,27,37},
			{14,28,36}
	};
	int cnt=0;
	int total=0;
	int result[]=new int[5];
	for(int[] i:arrScore) {
		for(int j:i)
		{
			result[cnt]+=j;
			total+=j;
		}
		cnt++;
	}
	cnt=0;
	for(int i:result)
		result[cnt++]/=3;
	for(int i:result)
		System.out.println(i);
	
	
	System.out.println(total);
	int avg=total/(arrScore.length*arrScore[0].length);
	System.out.println(avg);
}













