


-----------------------------------------
제네릭(Generic)
이번에는 Generic을 배워보자. Generic의 기본 사전적 의미는 포괄적인, 총칭의의 의미를 가지고 있다.
실질적인 역할은 자료형을 정하지 않고 임시로 자료형을 세워두는 것이다. 그리고 자료형은 외부에서 정한다.
C++의 template과 유사하다고 생각하면 된다. 주로 <대문자> 로 선언하는데 대문자에는 다음의 종류를
많이 사용한다.

대문자 종류
E: Element
K: Key
N: Number
T: Type
V: Value

ex) <E> <T> 

Generic이 사용되는 종류는 주로 3가지로 Class Method Interface가 존재한다. 각각 알아보자.

1. Generic Class
	클래스 내부에서 사용될 자료형을 지정한다.
클래스 내부에서 자료형을 임시로 선언해두고 외부에서 객체를 설정할때 자료형을 지정한다. 다음의 예시를 확인해 보자.

ex)
public class GTest<T> {
	private T data;

	public T getData() {
		return data;
	}

	public void setData(T data) {
		this.data = data;
	}
}

main
public static void main(String[] args) {
		GTest<String> g=new GTest<>();
		g.setData("안녕");
		System.out.println(g.getData());
	}
위 예제에서 주의할 점은 main에 객체화 부분이다. 객체화 시 <>안에 해당 클래스에서 사용할 Generic의 타입을 설정하는데 클래스 타입을 설정해야한다.
즉 int같은 것은 불가하고 Integer같은 클래스 타입으로 선언해 줘야 한다. Generic은 <>내부에 클래스 타입을 요구한다.


2. Generic Method
	클래스에 제네릭을 선언하지 않고, 메서드에만 제네릭을 선언
	메서드의 매개변수 또는 리턴타입이 제네릭이라면 리턴타입 앞에도 제네릭을 선언해야 한다.
ex)
/* public static <T1, T2> T function(T1 data, T2 data2) */
	public static <T> T function(T data)
	{
		T result;
		if(data instanceof Integer) {
			
		result =(T)"정수";
		}
		else if(data instanceof Double|| data instanceof Float) {
			result=(T)"실수";
		}
		else if(data instanceof Character) {
			result=(T)" 문자";
		}
		else if(data instanceof String) {
			result=(T)" 문자열";
		}
		else {
			result=null;
		}
		return result;
	}

main
System.out.println(GTest2.function(3.9F)); //실수라 출력


3. Generic Interface
	인테페이스에서 Generic 사용

public interface GInter<N1,N2> {
	abstract N1 add(N1 data1, N1 data2);
	N1 sub(N1 data1, N2 data2);
	N2 mul(N2 data1, N2 data2);
}

public class Calc implements GInter<Double, Integer> {

	@Override
	public Double add(Double data1, Double data2) {
		// TODO Auto-generated method stub
		return data1 +data2;
	}

	@Override
	public Double sub(Double data1, Integer data2) {
		// TODO Auto-generated method stub
		return data1-data2;
	}

	@Override
	public Integer mul(Double data1, Integer data2) {
		// TODO Auto-generated method stub
		return data1*data2;
	}
	
}
---------------------------------------------------
싱글톤 패턴
	단 한개의 객체만을 가지고 있는 클래스를 싱글톤 패턴으로 구현한다.
	클래스 내부에 객체를 생성하고 그 객체를 다른 곳에서 공통으로 사용한다.
	즉 그 객체 하나 뿐이다.
ex)
public class Single {
	
	private Single(){}//외부에서 새로 생성을 할 수 없게 막는 것 외부에서 new 불가
	
	private static Single instance= new Single();

	public static Single getInstance() {
		return instance;
	}
}

사용시
public class SingleMain {
	public static void main(String[] args) {
		day26.Single s =day26.Single.getInstance(); //실체화 이다. new 사용불가
	}
}



