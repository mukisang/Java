Frame생성자에 문자열을 넣어주면 그 창의 제목이 됨

public class ButtonTest extends Frame
{
	public ButtonTest() {
		super("익명 클래스 테스트");//
		Button btn=new Button("눌러!");
		add(btn);//버튼 추가
		setSize(500,500);//창 크기 조절
		
		
		addWindowListener(new WindowAdapter() {//x버튼 누를때 종료 Listener은 인터페이스 adapter는 추상 클래스
			@Override
			public void windowClosing(WindowEvent e) {
				System.out.println("프레임 종료");
				System.exit(0);
			}
		});
		
		btn.addMouseListener(new MouseAdapter(){//버튼 눌렀을때 동작
			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				System.out.println("버튼 눌렀어요");
			}
		});
		setVisible(true);//보이게 하는것
	}
--------------------------
인터페이스는 함수 선언시 자동적으로 추상 메서드가 됨
추상 클래스에서는 추상 메서드와 일반메서드 2개가 있으므로 이중에 선택해서 선언하면됨

추상 클래스의 경우 반드시 구현해야하는 메서드는 abstract로 선택적으로 쓸 수 있게 해주는건
일반 메서드로 만들어서 유용하게 한 반면 인터페이스는 무조건 추상 클래스만 선언하게 되어 상속 받으면 무조건
인터페이스 내의 모든 메서드를 구현해야 한다.
---------------------------------------------------------

내부 클래스(inner class)
클래스 내부에 클래스를 선언하여 외부 클래스의 필드 접근에 용이하기 위함.
내부 클래스의 필드를 사용하기 위해서는 외부 클래스에서 내부 클래스를 객체화 해야한다.

외부클래스명 객체명=new 외부 클래스 생성자();
외부 클래스명.내부클래스명 객체명=외부클래스 객체명.new 내부클래스 생성자();

내부 클래스를 사용하는 이유

캡슐화
A클래스에서 b라는 작업이 자주 쓰이고, 이 작업은 B 클래스를 만들어야 쉽게 관리할 수 있음.
하지만 다른 클래스에서 b작업이 필요 없거나, B클래스를 외부에 노출시키고 싶지 않을 때 사용한다.

객체의 속성(data fields)과 행위(메서드, methods)를 하나로 묶는 역할
실제 구현 내용 일부를 외부에 감추어 은닉한다.


내부 클래스는 GUI(Graphic User Interface)개발시 많이 사용됨.
예를 들어 a라는 버튼과 b라는 버튼이 있다고 하자. 두 버튼의 기능이 서로 다르다면 클래스를 별도로 만드는 것 보다
내부 클래스로 만들어 사용하는 것이 적합하다.
-------------------------------------
public class OutClass {
	int outData;
	
	public OutClass() {
		System.out.println("외부 클래스 생성자 호출 됨");
	}
	
	public void showOuter() {
		System.out.println("외부 클래스의 메서드 호출 됨");
		}
	
	
	public class InnerClass{
		int inData;
		public InnerClass()
		{
			System.out.println("내부 클래스의 생성자 호출 됨.");
		}
		public void showInner() {
			outData=20;
			
			System.out.println("내부 클래스의 메서드 호출 됨.");
			System.out.println("outData: "+outData);
			showOuter();
		}
	}
	
	
	
	public static void main(String[] args) {
		OutClass out= new OutClass();
		OutClass.InnerClass in= out.new InnerClass();
		in.showInner();
	}
}
-----------------------------------------------
익명 클래스(Anonymous Inner Class)
이름이 없는 클래스(일회성으로 사용하기 위함)
안드로이드에서 아주 많이 자주 쓰이는 문법

------------------------------------------------
익명 클래스 예시
public void registCafe(Cafe c) {
		c.setMenu(menu);
		System.out.println("카페 등록 완료");
		System.out.println("Menu");
		
		for (int i = 0; i < getMenu().length; i++) {
			System.out.println(i+1+c.getMenu()[i]);
		}
		c.sell(choice);
	}
	
	public static void main(String[] args) {
		Starbucks gangnam= new Starbucks();
		gangnam.registCafe(new Cafe() {//익명 클래스

			@Override
			public void setMenu(String[] menu) {
				gangnam.menu=menu;
				
			}

			@Override
			public String[] getMenu() {
				// TODO Auto-generated method stub
				return gangnam.menu;

			}

			@Override
			public void sell(String choice) {
				// TODO Auto-generated method stub
				for (int i = 0; i < gangnam.getMenu().length; i++) {
					gangnam.income+=gangnam.arPrice[i];
				}
			}
			
		});

-------------------------------------------------------


