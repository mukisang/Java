
---------------------------------
day29

// Hash: 검색을 빠르게 하기 위한 용도
// Tree: 데이터 정렬을 하기 위한 용도

/* java.util.Collections 클래스
	 Collections 클래스는 여러 유용한 알고리즘을 구현한 메소드들을 제공
	 대부분 클래스메소드 (static) 형태로 제공됨
	 
	 정렬(sort)
	 섞기(shuffle)
	 탐색(search)
 */

----------------------------------
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Set;
import java.util.TreeMap;

public class TreeMapMain {
	public static void main(String[] args) {
		System.out.println("TreeMap 클래스");
		
		
		TreeMap<Integer, String> tmap = new TreeMap<Integer, String>();
		
		//데이터 저장: put(key, value) 사용
		tmap.put(3, "asdf");
		tmap.put(4, "zxcv");
		tmap.put(1, "aaa");
		tmap.put(2, "qwert");
		
		//values(): value들로만 이루어진 Collection 리턴
		System.out.println("values()");
		for(String value: tmap.values()) {
			System.out.println(value);
		}
		
		//데이터 검색 : get(key) 사용
		//1. 키 값들로만 이루어진 Set 만듬
		Set<Integer> kset = tmap.keySet();
		//2. keySet을 가지고 Iterator 만듬
		Iterator<Integer> itr = kset.iterator();
		while(itr.hasNext()) {
			int key = itr.next();
			System.out.println(key+":"+tmap.get(key));
		}
		
		//key 내림차순 출력
		NavigableSet<Integer> navi = tmap.navigableKeySet();
		Iterator<Integer> itr2 = navi.descendingIterator();
		while(itr2.hasNext()) {
			int key = itr2.next();
			System.out.println(key+ " : "+tmap.get(key));
		}
		
		//HashMap -->TreeMap 전환하기
		HashMap<String, Integer>hmap = new HashMap<String, Integer>();
		hmap.put("세종대왕", 10000);
		hmap.put("이율곡", 1000);
		hmap.put("사임당", 50000);
		//생성자에 hmap을 넣으면 된다.
		TreeMap<String, Integer> tmap2 = new TreeMap<String, Integer>(hmap);
		
		for(Map.Entry<String, Integer>e : tmap2.entrySet()) {
			System.out.println(e.getKey()+" : "+e.getValue());
		}
		
	}
}
---------------------------------
Collection 에서 제공하는 메서드 
sort
순차적으로 정렬해준다.
		//sort()
		//기본적으로 속도가 비교적 빠르고 안전성이 보장되는 Merge Sort 사용
		System.out.println("sort() 사용");
		Collections.sort(list1);
		System.out.println(list1.toString());
shuffle
무작위로 섞어준다.
		//shuffle(섞기)
		Collections.shuffle(list1);
		System.out.println(list1.toString());
min, max
최대 최소를 뽑아준다.
Collections.min(list1);
Collections.max(list1);

그렇다면 단순 String, Integer가 아닌 여러 정보를 담고 있는 클래스 콜랙션프레임워크들은
어떻게 작동해야 하나?
바로 comparable이라는 인터페이스를 이용하여 compareTo라는 메서드를 구현해서 콜렉션 메서드들을 이용해야 한다.
그렇지 않으면 작동이 안되고 오류가 발생한다.
class Student implements Comparable<Student>
{
	String name;
	double point;
	
	
	public Student(String name, double point) {
		this.name = name;
		this.point = point;
	}
	
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return this.name+" : "+this.point+ "점";
	}
	
	
	//compareTo() 메서드는 메개변수 객체를 현재의 객체와 비교하여 작으면 '음수', 같으면 '0', 크면 '양수'를 리턴
	@Override
	public int compareTo(Student o) {
		if(o.point<this.point)return -1;
		else if(o.point>this.point)return 1;
		else return 0;
	}	
}

다른 방법으로는 comparator를 사용하는 방법이 있다. sort의 종류를 정하려면 이 방법을 쓴다. 위의 comparable은 하나의 객체의 하나의 대소비교만 할 수 있지만 다음과 같이 사용하면 원하는 sort를 원할때 이용하면
돼서 편리하다.
class Asc implements Comparator<Student>{

	@Override
	public int compare(Student o1, Student o2) {	
		return o1.name.compareTo(o2.name);
	}	
}

메인에서는 다음과 같이 사용한다.
Collections.sort(list3,new Asc());
System.out.println(list3.toString());

