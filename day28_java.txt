
---------------------------
Set, HashSet<E>

Collection<E>
 |__ Set<E>
      |__ HashSet<E>, TreeSet<E>

 Set:
 1. 자료의 중복 저장이 허용되지 않는다. (hashCode() 값의 중복여부!)
 2. 저장 순서가 유지되지 않는다.(인덱스 없다.)
 (예) {1, 2, 3} = {1, 1, 2, 2, 3} : 중복 저장이 안되기 때문에 같은 Set
 (예) {1, 2, 3} = {1, 3, 2}: 저장 순서가 중요하지 않기 때문에 같은 Set
	
 HashSet: 매우 빠른 검색 속도를 제공

※ HashXXX ← '검색속도 향상'을 쓰는 자료구조 입니다==검색에 특화돼 있다.

같은 값을 대입했을때 같은 해쉬코드 값의 경우 대입할 값이 제외된다.

add메서드에서 같은 값을 입력시 false를 리턴 다른 값이면 true
-------------------------------------------------
예제
public static void main(String[] args) {
		System.out.println("HashSet 클래스");
		
		//Integer 타입을 저장할 수 있는 HashSet 생성
		HashSet<Integer> set=new HashSet<Integer>();
		
		
		//데이터 생성(저장):add()
		set.add(100);
		set.add(200);
		set.add(300);
		set.add(100);
		set.add(400);
		set.add(200);
		set.add(500);
		
		
		//HashSet 의 데이터 개쉬: size()
		System.out.println("Set 의 크기: "+set.size());
		
		
		//데이터 검색
		//Set 은 인덱스가 없기 때문에 get() 메소드 사용하지 않습니다.
		//데이터 검색을 위해선 Iterator 사용해야 함
		System.out.println();
	
		Iterator<Integer> itr =set.iterator();
		while(itr.hasNext())
		{
			System.out.println(itr.next());
		}
		//데이터 삭제
		//remove(element)
		//element 가 있다면 삭제 후 true 리턴
		//element 가 없었다면 false 리턴
		System.out.println(set.remove(100));
		System.out.println(set.remove(100));
		
		for(Integer e: set)
		{
			System.out.println(e);
		}
		//데이터 수정: set() 메소드 제공하지 않습니다.지우고 추가하는 식으로 작동
		set.remove(500);
		set.add(555);
		System.out.println("변경후");
		set.forEach(System.out::println);
		
		
	}//end main
----------------------------------------------------
public class HashSetMain3 {
	private String s;
	
	public HashSetMain3(String str) {this.s=str;}
	
	public static void main(String[] args) {
		String str1="Hello";
		String str2="Hello";
		String str3 = new String("Hello");
		String str4 = new String("Hello");
		
		System.out.println(str1.hashCode());
		System.out.println(str3.hashCode());
		System.out.println(str4.hashCode());
		
		HashSet<String> set=new HashSet<String>();
		
		set.add(str1);
		set.add(str2);
		set.add(str3);
		
		System.out.println(set.size());
		
		HashSetMain3 s1= new HashSetMain3("Hello");
		HashSetMain3 s2= new HashSetMain3("Hello");
		
		HashSet<HashSetMain3> set2=new HashSet<HashSetMain3>();
		set2.add(s1);
		set2.add(s2);
		
		System.out.println(s1.hashCode());
		System.out.println(s2.hashCode());
		System.out.println(set2.size());
		
	}
}
Hash code를 확인해보자. Hashcode의 default값은 객체의 주소를 비교하는 것이다.
하지만 객체 클래스가 String인 경우만 Overriding이 되어있어 객체의 문자열 값을 비교하는 것이다.
set2에서의 size를 보면 2개가 들어가는 이유는 s1, s2는 String클래스가 아닌 별도의 클래스를 갖기 때문에 각 객체의 주소가 다르다
따라서 다른 걸로 인식하는 반면 str1,str2,str3는 String 클래스 타입이기 때문에 hashcode가 각 객체의 String문자열 값을 비교를 통해 같은 걸로 인식한다.

----------------------
String str1="data";
String str2="data2";
String str3=new String("data");
String str4=new String("data");
저번에 했던 다음 코드의 경우 모두 hashcode값이 같다. 같은 object 안에 존재하기 때문이다.
System.out.println(str3.equals(str4)); 참
위 예제의
System.out.println(s1.equals(s2)); 거짓
s1, s2는 각각이 객체로써 서로 객체가 다르기 때문에 거짓이다.
---------------------------------
TreeSet

 Collection<E>
  |__ Set<E>
       |__ HashSet<E>, TreeSet<E>

 TreeSet: 데이터가 정렬된 상태로 저장(오름차순, 내림차순)
 
(※ TreeXXX ← 주로 '정렬'에 특화된 자료구조 입니다)
--------------------------------------
package day28;

import java.util.Iterator;
import java.util.TreeSet;

public class TreeSetMain {
	public static void main(String[] args) {
		System.out.println("TreeSet 클래스");
		
		//Integer 타입 저장할 수 있는 TreeSet 생성
		TreeSet<Integer> tset=new TreeSet<Integer>();
		
		tset.add(11);
		tset.add(2);
		tset.add(14);
		tset.add(1);
		tset.add(7);
		tset.add(15);
		tset.add(5);
		tset.add(8);
		
		//Iterator 사용해서 출력
		Iterator<Integer> itr =tset.iterator();
		
		while(itr.hasNext()) {
			System.out.println(itr.next());
		}
		
		//내림차순 출력
		Iterator<Integer> itr2 = tset.descendingIterator();
		while(itr2.hasNext()) {
			System.out.println(itr2.next());
		}
	}
}
-------------------------------
/* Map<K, V>, HashMap<K, V>
	 Collection<E>
	  |__ List<E>, Set<E>
	
	 List<E>
	  |__ ArrayList<E>, LinkedList<E>
	
	 Set<E>
	  |__ HashSet<E>, TreeSet<E>
	
	 Map<K, V>
	  |__ HashMap<K, V>, TreeMap<K, V>
	
	 Map: key-value 저장 방식의 자료 구조
	  1. key는 중복되지 않는 값만 허용
	  2. value는 같더라도 key 값이 다르면 저장 가능
	  3. 검색, 수정, 삭제를 할 때 key를 사용
*/
---------------------------------
package day28;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class HashMapMain {
	public static void main(String[] args) {
		//HashMap 인스턴스 생성
		//key - Integer 타입
		//value - String 타입
		HashMap<Integer, String> hmap = new HashMap<Integer, String>();
		
		//데이터 저장&수정: put() 메소드 사용
		hmap.put(1, "이상묵");
		hmap.put(2, "민경우");
		System.out.println(hmap.put(3, "박민주"));
		System.out.println(hmap.put(1, "유기현"));
		//같은 키 값으로 데이터를 put 하게 되면, 기존 값이 수정(replace) 됨. 그리고 기존값 리턴함
		
		
		
		//데이터 개수 확인 : size()
		System.out.println(hmap.size());
		//데이터 읽기: get(key) 사용
		System.out.println();
		System.out.println(hmap.get(1));//있으면 해당 value리턴
		System.out.println(hmap.get(5));//없으면 null 리턴
		
		
		//방법1: HashMap 의 Iterator 사용
		/*
		 * 1. HashMap의 keySet()메소드 사용하여 저장된 key값들로만 구성된 set 추출. 2. 1에서 만들어진 Set의
		 * iterator() 메소드 사용하여 Iterator 생성
		 */
		Set<Integer>keySet=hmap.keySet();
		Iterator<Integer> itr = keySet.iterator();
		while(itr.hasNext()) {
			Integer key=itr.next();
			System.out.println(key+" : "+hmap.get(key));
		}
		
		System.out.println();
		
		//방법2: Map Entry 사용
		//HashMap 의 entrySet() 메소드 리턴--> set<Entry<k,v>>
		for(Map.Entry<Integer, String>m :hmap.entrySet() )
		{
			System.out.println(m.getKey()+ " : "+m.getValue());
		}

	}
}
------------------------------
put 메소드의 경우 정상적으로 리턴할 시에 null리턴
put 에 같은 key값을 입력시에 기존에 있던 key의 value값을 리턴
intern

-------------------------------------------------------

도전과제
arr[]= {2,4,5,4,3,3,4}
주어진 배열이 위와 같을때 다음과 같이 발생횟수 나타내기
2: 1개
3: 2개
hash map으로 만들어 보기.